package eu._4fh.tsgroupguildsync;

import java.text.ParseException;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.TimerTask;
import java.util.Vector;
import java.util.regex.Matcher;

import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;

public class CheckGroupAssignmentsTask {

	private final class CheckTimerTask extends TimerTask {
		@Override
		public void run() {
			try {
				getOnlineClientFromDbId(1);
				Map<String, String> response = plugin.getQuery().doCommand("logview lines=100");
				if (!("0".equals(response.get("id")))) {
					throw new RuntimeException(
							"Cant execute logview, got error id=" + response.get("id") + ": " + response.get("error"));
				}
				Vector<HashMap<String, String>> log = plugin.getQuery().parseRawData(response.get("response"));

				for (HashMap<String, String> logResponseLine : log) {
					String line = logResponseLine.get("l");
					if (line == null || line.isEmpty()) {
						continue;
					}
					checkLine(line);
				}
			} catch (Exception e) {
				plugin.getLog().error("Cant parse server log to check group assignments", e);
			}
		}
	}

	private final @Nonnull SyncPlugin plugin;
	private @Nonnull int monitoredGroup;
	private @CheckForNull Date lastCheckedDate;

	public CheckGroupAssignmentsTask(final @Nonnull SyncPlugin plugin) {
		this.plugin = plugin;
		lastCheckedDate = null;
	}

	private synchronized void checkLine(String line) throws ParseException {
		Matcher match = plugin.getConfig().getTsLogServerGroupAddPattern().matcher(line);
		if (!match.matches()) {
			// Not a server group add line
			return;
		}

		String dateStr = match.group("date");
		if (dateStr == null) {
			throw new RuntimeException("Missing date Parameter, line: " + line);
		}

		Date date = plugin.getConfig().getTsLogDateFormat().parse(dateStr);
		if (lastCheckedDate != null && (lastCheckedDate.after(date) || lastCheckedDate.equals(date))) {
			plugin.getLog()
					.debug("Not checking line, because it is before " + lastCheckedDate.toString() + ". Line:" + line);
			return;
		}
		lastCheckedDate = date;

		plugin.getLog().debug("Found server-group-add-log-line: " + line);

		long groupId;
		long targetDbId;
		long sourceDbId;
		try {
			groupId = Long.parseLong(match.group("tgroup"));
		} catch (NumberFormatException e) {
			throw new RuntimeException("Cant fetch group id from log line. Line: " + line);
		}
		try {
			sourceDbId = Long.parseLong(match.group("suser"));
		} catch (NumberFormatException e) {
			throw new RuntimeException("Cant fetch source user id from log line. Line: " + line);
		}
		try {
			targetDbId = Long.parseLong(match.group("tuser"));
		} catch (NumberFormatException e) {
			throw new RuntimeException("Cant fetch target user id from log line. Line: " + line);
		}

		if (groupId != monitoredGroup) {
			plugin.getLog().debug("Ignored line, server group " + groupId + " doesnt match " + monitoredGroup);
			return;
		}

		if (sourceDbId == plugin.getQuery().getCurrentQueryClientDatabaseID()) {
			plugin.getLog().debug("Ignored line, was generated by myself. Line: " + line);
			return;
		}

		int sourceClientId = getOnlineClientFromDbId(sourceDbId);
		if (sourceClientId < 0) {
			plugin.getLog()
					.info("Cant message source client with dbid " + sourceDbId + " for server-group-add line: " + line);
			return;
		}

		@Nonnull
		String targetClientName = "someone";
		int targetClientId = getOnlineClientFromDbId(targetDbId);
		if (targetClientId >= 0) {
			targetClientName = plugin.getMod().getClientListEntry((int) targetClientId).get("client_nickname");
		}

		String msg = "You just added " + targetClientName + " to a server group that is protected. Use \"!"
				+ plugin.getConfig().getPrefix() + " Add " + String.valueOf(targetDbId)
				+ " IngameCharName-IngameCharServer\" to add the user to the group.";
		plugin.getLog().debug("Sending message to client " + sourceClientId + ": " + msg);
		plugin.getMod().sendMessageToClient(plugin.getConfig().getPrefix(), "chat", sourceClientId, msg);
	}

	private int getOnlineClientFromDbId(long id) {
		Vector<HashMap<String, String>> clientList = plugin.getMod().getClientList();
		for (HashMap<String, String> client : clientList) {
			final @CheckForNull String idStr = client.get("client_database_id");
			if (idStr == null || idStr.isEmpty()) {
				continue;
			}
			if (Long.parseLong(idStr) == id) {
				return Integer.parseInt(client.get("clid"));
			}
		}
		return -1;
	}

	public synchronized void start() {
		this.monitoredGroup = plugin.getConfig().getMainGroup();
		long checkInterval = plugin.getConfig().getTsLogCheckInterval();
		plugin.getMod().addBotTimer(new CheckTimerTask(), checkInterval * 60 * 1000, checkInterval * 60 * 1000);
	}
}
